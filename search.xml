<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java容器__ArrayList</title>
      <link href="/2019/05/24/java-rong-qi-arraylist/"/>
      <url>/2019/05/24/java-rong-qi-arraylist/</url>
      
        <content type="html"><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h1><p>ArrayList类的定义如下：<br>&ensp;<code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</code><br>从它的定义中可以看出ArrayList继承自AbstractList类，实现了List接口。List接口是Collection接口的子接口，它规定了实现该接口的类是一个元素有序、可重复的集合，集合中的每个元素都有其对应的顺序索引，它默认按元素的添加顺序设置元素的索引，比如：第一次添加的元素索引为0，第二次的为1……<br>RandomAccess、Serializable和Cloneable接口都是空接口。RandomAccess表示ArrayList可以在常数时间内完成随机存取以便使用者可以根据需求选择合适的集合，Serializable接口表示ArrayList对象可以序列化，而Cloneable接口表示ArrayList对象可以调用Object类的clone()方法并不会抛出异常。</p><h1 id="2-主要成员变量"><a href="#2-主要成员变量" class="headerlink" title="2.主要成员变量"></a>2.主要成员变量</h1><p>ArrayList类中的成员变量主要有以下几个：<br>1.存放数据的Object数组elementData，ArrayList基于数组实现就保证了它可以在常数的时间内完成随机存取：<br>&ensp;<code>transient Object[] elementData;</code><br>2.ArrayList对象默认的初始容量：<br>&ensp;<code>private static final int DEFAULT_CAPACITY = 10;</code><br>3.ArrayList的容量size，size是私有的实例变量，不允许在ArrayList对象之外访问，只能通过public的size()方法访问：<br>&ensp;<code>private int size;</code><br>4.ArrayList的最大容量：<br>&ensp;<code>private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</code><br>其它变量可以自行查看ArrayList.java文件。</p><h1 id="3-ArrayList常用方法的实现"><a href="#3-ArrayList常用方法的实现" class="headerlink" title="3.ArrayList常用方法的实现"></a>3.ArrayList常用方法的实现</h1><h3 id="3-1添加元素–add"><a href="#3-1添加元素–add" class="headerlink" title="3.1添加元素–add()"></a>3.1添加元素–add()</h3><p>add()方法有两个重载的形式：<br>1.第一个是不用提供索引的add():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>以要添加进集合的元素为参数调用该方法，首先会确保elementData数组的容量，之后在elementData数组的最后加入该元素，如果成功加入则返回true.<br>2.第二个是在某个确定的位置加入元素的add():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这个方法除了要提供要添加的元素，还要提供该元素放入的位置index。该方法首先核对index的合法性和element数组的大小；接着调用System类的静态方法arraycopy()方法，将需要挪动的元素移动到相应的位置，arrayCopy()方法是native的，应该是使用c++实现的；最后把需要添加的元素放入相应的位置并且容量加1。</p><h3 id="3-2扩容–grow"><a href="#3-2扩容–grow" class="headerlink" title="3.2扩容–grow()"></a>3.2扩容–grow()</h3><p>当添加元素之前，会使用ensureCapacityInternal()方法来确保elementData数组容量充足。如果不够，需要使用grow()方法进行扩容。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            minCapacity <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>            Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>            MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>1.<code>ensureCapacityInternal(int minCapacity)</code>方法中的<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>是ArrayList类的静态常量，是一个空的Object数组。从该方法的前三行代码可以看出首次为ArrayList对象添加数据时，会是它的容量变为10。<br>2.<code>ensureExplicitCapacity(int minCapacity)</code>方法会比较需要的最小容量<code>minCapacity</code>和当前ArrayList容量<code>elementData.length</code>的大小，如果需要的容量大于当前的容量，则需要扩容。<br>3.<code>private void grow(int minCapacity)</code>方法就是扩容的实现。<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>表明新的容量是旧容量的1.5倍。接下来的两行应该是防止oldCapacity右移一位后变为0或负数。<code>newCapacity = hugeCapacity(minCapacity);</code>确保minCapacity已经很大时，newCapacity不会超过数组大小的极限。得到了需要的容量之后，调用Arrays的copy()方法，这个方法会新建一个数组，并将原来的数组中的元素都拷贝进新的数组，返回新的数组，拷贝数组依然是通过System.arrayCopy()方法实现。扩容操作需要把原数组整个的复制到新数组中，这个操作代价很高，所以在创建ArrayList对象的时候最好指定大概的容量，从而减少扩容操作的次数。</p><h3 id="3-3删除元素–remove"><a href="#3-3删除元素–remove" class="headerlink" title="3.3删除元素–remove()"></a>3.3删除元素–remove()</h3><p>ArrayList中有两种形式的remove():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// clear to let GC do its work</span>    <span class="token punctuation">}</span></code></pre><p><code>public E remove(int index)</code>是删除索引处的元素；<br><code>public boolean remove(Object o)</code>是删除集合中第一个与Object相等的元素；<br>从代码可以看出：每次删除都要计算出需要移动的元素数目，也就是删除元素之后的元素的数目，然后调用System.arrcopy()方法将index+1及后面位置的所有元素都复制到index位置上，这个操作的复杂度为O(size)。</p><h3 id="3-4Fail-Fast机制"><a href="#3-4Fail-Fast机制" class="headerlink" title="3.4Fail-Fast机制"></a>3.4Fail-Fast机制</h3><p>ArrayList对象中有一个继承自AbstractList的变量<code>protected transient int modCount = 0;</code>，modCount用来记录ArrayList结构发生变化的次数。比如上面的add和remove，还有调整内部数组的大小，都会是modCount变化。在进行序列化或者迭代等操作的时候，需要比较操作前后modCount是否发生变化，如果modCount改变了，就要抛出ConcurrentModificationException。下面用两个线程演示一下这个现象：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ArrayListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">TraversalThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遍历ArrayList</span>            <span class="token comment" spellcheck="true">//synchronized(ArrayListTest.this.test){</span>                Iterator iterator <span class="token operator">=</span> ArrayListTest<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">ModifyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//修改ArrayList</span>            ArrayListTest<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayListTest arrayListTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TraversalThread traversalThread <span class="token operator">=</span> arrayListTest<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">TraversalThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModifyThread modifyThread <span class="token operator">=</span> arrayListTest<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">ModifyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//traversalThread.setPriority(5);</span>        <span class="token comment" spellcheck="true">//modifyThread.setPriority(10);</span>        traversalThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modifyThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>线程traversalThread和线程modifyThread会对同一个Arraylist对象进行访问，前者遍历集合，后者向集合中添加一个元素。代码的运行结果为：</p><p><div align="center/"><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/Java%E9%9B%86%E5%90%88_ArrayList/ArrayList_1.PNG" alt="" title="result1"></div></p><p><div align="center/"><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/Java%E9%9B%86%E5%90%88_ArrayList/ArrayList_2.PNG" alt="" title="result2"></div></p><p><div align="center/"><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/Java%E9%9B%86%E5%90%88_ArrayList/ArrayList_3.PNG" alt="" title="result3"><br>图1和图3都是先遍历，在遍历的过程中出现了修改ArrayList对象的操作，所以出现了异常。图2是先修改然后再遍历，没有异常。出现异常的原因就是内部类Itr(该类就是ArrayList的Iterator)的next()方法会检查modCount变量，modCount发生变化就会抛出ConcurrentModificationException异常。</div></p>]]></content>
      
      
      <categories>
          
          <category> Java集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK源码 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组和集合的遍历方法</title>
      <link href="/2019/05/23/java-shu-zu-he-ji-he-de-bian-li-fang-fa/"/>
      <url>/2019/05/23/java-shu-zu-he-ji-he-de-bian-li-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java遍历数组可以使用<strong>普通的for循环</strong>，也可以使用<strong>增强的for循环</strong>；而Java遍历集合元素的方法有：增强for循环，使用集合的iterator等。</p></blockquote><h1 id="1-数组的遍历"><a href="#1-数组的遍历" class="headerlink" title="1.数组的遍历"></a>1.数组的遍历</h1><h3 id="1-1-普通for循环"><a href="#1-1-普通for循环" class="headerlink" title="1.1 普通for循环"></a>1.1 普通for循环</h3><p>   这种遍历方法是设置一个循环变量，将循环变量作为数组的索引依次访问数组中的每个元素。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="1-2-增强的for循环"><a href="#1-2-增强的for循环" class="headerlink" title="1.2 增强的for循环"></a>1.2 增强的for循环</h3><p>从jdk1.5中引入的增强for循环可以不用设置循环变量，简化了代码的编写。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> e <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="2-集合的遍历"><a href="#2-集合的遍历" class="headerlink" title="2.集合的遍历"></a>2.集合的遍历</h1><h3 id="2-1-使用增强的for循环"><a href="#2-1-使用增强的for循环" class="headerlink" title="2.1 使用增强的for循环"></a>2.1 使用增强的for循环</h3><p>这个应该是比较常用的方法。使用方法为：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">for</span><span class="token punctuation">(</span>Type value <span class="token operator">:</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">{</span>        expression value<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注意Iterable，这是集合可以使用增强for循环遍历元素的前提，也就是说集合必须实现Iterable接口之后才可以使用增强的for循环。</p><h3 id="2-2-使用Iterator"><a href="#2-2-使用Iterator" class="headerlink" title="2.2 使用Iterator"></a>2.2 使用Iterator</h3><p>先看Java集合的父接口-Collection接口的定义：<br>&ensp;<code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code><br>可以看到Collection接口继承了Iterable接口，那Iterable接口是什么呢？它的定义如下<br>&ensp;<code>public interface Iterable&lt;T&gt;</code><br>在Iterable接口中有一个抽象方法：<br>&ensp;<code>Iterator&lt;T&gt; iterator();</code><br>iterator()方法返回一个Iterarot，那Iterator是什么？它的定义如下:<br>&ensp;<code>public interface Iterator&lt;E&gt;</code><br>Iterator接口中的抽象方法有两个:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据方法的名字，可以大致了解它的功能：<br>hasNext()方法为boolean类型，它在遍历集合的时候会返回是否还有未遍历的元素；<br>next()方法返回一个E类型的元素，它会返回一个集合中还未遍历的元素。<br>Collection接口没有实现从Iterable接口继承过来的iterator()抽象方法，iterator的实现均放在了具体的某个集合类的定义中。下面以ArrayList为例，看一下Iterator的实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// index of next element to return</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// index of last element returned; -1 if no such</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre><p>可以看到是ArrayList是定义了一个内部类Itr实现了Iterator接口，而iterator方法返回了该类的一个实例，其中的elementData就是ArrayList对象保存数据用的Object类型的数组，size是该数组的大小。<br>所以要遍历ArrayList对象中的元素，可以先获得该对象的迭代器，然后使用hasNext()和next()两个方法实现对它的遍历：</p><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"springMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"MyBatis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-3-两种遍历集合方法的比较"><a href="#2-3-两种遍历集合方法的比较" class="headerlink" title="2.3 两种遍历集合方法的比较"></a>2.3 两种遍历集合方法的比较</h3><p>其实增强的for循环的内部实现就是使用的集合对象的iterator，这种循环的优点是代码更简洁，缺点是：<br>1.只能顺次遍历所有元素，无法实现较为复杂的循环，如在某些条件下需要后退到之前遍历过的元素；<br>2.循环变量i不可见，无法得知当前遍历到数组的第几个元素。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>虽然增强的for循环会被编译器转化为iterator操作，但是使用增强的for循环时，iterator是不可见的，所以如果需要调用iterator的remove()方法或是其他一些操作，就有些力不从心了。所以，Java 5.0提供的增强的for循环能让我们的代码更简洁，可以让我们更加方便的使用iterator，但是它也是有局限性的，所以要根据实际情况有选择的使用。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
            <tag> JDK源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载机制</title>
      <link href="/2019/05/14/java-lei-jia-zai-ji-zhi/"/>
      <url>/2019/05/14/java-lei-jia-zai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们编写的Java代码（.java文件）经过编译之后，生成.class文件，.class文件中描述了这个类的各种信息。而这些信息最终都需要加载到虚拟机中之后才能运行和使用。虚拟机把描述类的数据从.class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p></blockquote><h1 id="1、类的生命周期"><a href="#1、类的生命周期" class="headerlink" title="1、类的生命周期"></a>1、类的生命周期</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，整个生命周期包括：<strong>加载、验证、准备、解析、使用</strong>和<strong>卸载</strong>，如图所示。其中解析阶段可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定。  </p><p><div align="center/"><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/%E7%BB%98%E5%9B%BE1.jpg" alt="" title="类的生命周期"></div></p><h1 id="2、类的加载过程"><a href="#2、类的加载过程" class="headerlink" title="2、类的加载过程"></a>2、类的加载过程</h1><h3 id="2-1-加载"><a href="#2-1-加载" class="headerlink" title="2.1 加载"></a>2.1 加载</h3><p>加载是类加载中的一个阶段，这个阶段完成以下三件事:    </p><ul><li>通过类的完全限定名获取定义这个类的二进制字节流  </li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构    </li><li>在内存中生成一个代表该类的Class对象，作为方法区中该类各种数据的访问入口</li></ul><p>其中的二进制字节流获取方式可以是:    </p><ul><li>从zip包中读取，这是使用JAR、EAR、WAR格式的基础    </li><li>从网络中获取，最典型的应用是Applet</li><li>运行时生成，比如动态代理技术，在java.lang.reflect.Proxy使用ProxyGenerator.generateProxyClass的代理类的二进制字节流</li><li>由其它文件生成，例如由JSP文件生成对应的Class类</li></ul><h3 id="2-2-验证"><a href="#2-2-验证" class="headerlink" title="2.2 验证"></a>2.2 验证</h3><p>确保.class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h3 id="2-3-准备"><a href="#2-3-准备" class="headerlink" title="2.3 准备"></a>2.3 准备</h3><p><strong>为类变量(被static修饰的变量)分配内存</strong>并<strong>设置类变量初始值</strong>的阶段，这些类变量所使用的内存都将在<strong>方法区</strong>中进行分配。</p><p>(1)这个阶段进行<strong>内存分配的只包括类变量</strong>，不包括实例变量，实例变量是在类实例化时随着对象一起分配在Java堆中；<br>(2)类变量在这个阶段一般被初始化为0值，比如类变量value被初始化为0而不是321<br>&ensp;<code>public statuc int value = 321;</code><br>如果类变量是常量，那么它将被初始化为表达式所声明的值，比如下面的常量value被初始化为321<br>&ensp;<code>public static final int value = 321;</code></p><h3 id="2-4-解析"><a href="#2-4-解析" class="headerlink" title="2.4 解析"></a>2.4 解析</h3><p>将.class文件中的常量池中的符号引用替换为直接引用。</p><h3 id="2-5-初始化"><a href="#2-5-初始化" class="headerlink" title="2.5 初始化"></a>2.5 初始化</h3><p>初始化是类加载过程的最后一步，前面的几步，除了在加载阶段用户可以编写程序参与之外，其余都是由虚拟机主导完成的。<br>在初始化阶段，才真正开始执行该类中编写的Java代码。在这个阶段中，执行类构造器的<strong>&lt;clinit&gt;()方法</strong>，这个方法是由编译器自动收集类中的所有类变量的赋值语句和静态初始化块中的语句合并产生的。编译器收集的顺序是由语句在源文件中出现的顺序决定的。<br>静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。比如下面代码：    </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//给变量i赋值可以正常编译通过</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这句编译器会提示“非法向前引用”</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorRT的安装与使用</title>
      <link href="/2019/02/24/tensorrt-de-an-zhuang-yu-shi-yong/"/>
      <url>/2019/02/24/tensorrt-de-an-zhuang-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>深度学习应用需要使用预训练的模型进行推理。而使用主流深度学习框架训练出的神经网络模型因保存了巨额的参数而占据了极大的存储空间，例如经典的图像分类模型Alexnet模型就有超过了200M。除此之外，直接使用深度学习框架进行推理，往往会耗费较多的时间，造成很大的时延，这对于某些对时延要求苛刻的深度学习应用（比如自动驾驶、视频监控等）是不可行的。</p></blockquote><h1 id="1、TensorRT介绍"><a href="#1、TensorRT介绍" class="headerlink" title="1、TensorRT介绍"></a>1、TensorRT介绍</h1><p>NVIDIA公司的TensorRT是一款高性能深度学习推理平台。它为深度学习推理应用提供了推理优化器和运行时。在推理过程中，与只在运行在CPU平台上的应用相比，基于TensorRT的应用表现出超过40倍的加速比。使用TensorRT，你可以优化在所有主流框架下训练出的神经网络模型、调整到更低的精确的的同时保持高精度推理并且最终部署到超大规模数据中心、嵌入式或自动驾驶平台。<br><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/TensorRT%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1.png" alt=""></p><h1 id="2、TensorRT的安装"><a href="#2、TensorRT的安装" class="headerlink" title="2、TensorRT的安装"></a>2、TensorRT的安装</h1><p>官网提供了多种安装方式，我选择了Tar File的安装方式。首先要<a href="https://developer.nvidia.com/nvidia-tensorrt-5x-download" target="_blank" rel="noopener">下载安装包</a>，下载的时候需要nvidia的开发者账号，登陆之后可以下载。根据已经安装的CUDA的版本选择对应的TensorRT的安装包，假设电脑上已经安装CUDA9.0以及cudnn7.3。<br><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/TensorRT%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/2.jpg" alt=""><br>下载完成之后，将下载的文件TensorRT-5.0.2.6.Ubuntu-16.04.4.x86_64-gnu.cuda-9.0.cudnn7.3.tar.gz移动到/home目录下，用tar命令进行解压：</p><pre><code>$ tar xzvf TensorRT-5.0.2.6.Ubuntu-16.04.4.x86_64-gnu.cuda-9.0.cudnn7.3.tar.gz</code></pre><p>解压后，在~/.bashrc中添加环境变量：</p><pre><code>Export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/&lt;your name&gt;/TensorRT-5.0.2.6/lib</code></pre><p>添加之后重新启动Terminal，cd到TensorRT-5.0.2.6/python目录下，安装</p><pre><code>$ pip install tensorrt-5.0.2.6-py2.py3-none-any.whl</code></pre><p>cd到TensorRT-5.0.2.6/uff目录下，安装  </p><pre><code>$ pip install uff-0.5.5-py2.py3-none-any.whl</code></pre><p>cd到TensorRT-5.0.2.6/graphsurgeon目录下，安装  </p><pre><code>pip install graphsurgeon-0.3.2-py2.py3-none-any.whl</code></pre><p>至此，TensorRT就已经安装完成了。下面通过运行一个官方的demo说明TensorRT的使用。</p><h1 id="3、TensorRT的使用"><a href="#3、TensorRT的使用" class="headerlink" title="3、TensorRT的使用"></a>3、TensorRT的使用</h1><p>在官方给出的demo中选择python接口的例子中的uff_ssd，这个例子是对Tensorflow框架训练出的ssd-inception-v2-coco目标检测模型进行优化，然后进行推理。</p><p>cd到TensorRT-5.0.2.6/samples/python/uff_ssd目录，升级cmake至3.8版本以上，并安装依赖：</p><pre><code>pip install -r requirements.txt</code></pre><p>安装完成后编译此项目，依次运行:  </p><pre><code>$ mkdir -p build </code></pre><pre><code>$ cd build</code></pre><pre><code>$ cmake ..</code></pre><pre><code>$ make</code></pre><pre><code>$ cd ..</code></pre><p>（cmake之前需要修改uff-ssd目录下的CMakeLists.txt，将第19和20行分别改为：set-ifndef(TRT-LIB /home/<your-name>/TensorRT-5.0.2.6/lib和set-ifndef(TRT-INCLUDE /home/<your-name>/TensorRT-5.0.2.6/include))）<br>执行detect-objects.py脚本，脚本程序会下载ssd-inception-v2-coco模型，转化为.uff格式，解析模型并且创建inference-engine运行推理。<br>推理结果自动保存到本目录下的image-inferred.jpg，推理时间为23ms。</your-name></your-name></p><p><div align="center"><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/TensorRT%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/3.jpg" alt=""></div></p><p><div align="center"><img src="https://test-1258680748.cos.ap-shanghai.myqcloud.com/TensorRT%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/4.jpg" alt=""></div></p>]]></content>
      
      
      <categories>
          
          <category> 高性能计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习推理 </tag>
            
            <tag> nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDownPad2的下载与安装</title>
      <link href="/2019/02/05/markdownpad2-de-xia-zai-yu-an-zhuang/"/>
      <url>/2019/02/05/markdownpad2-de-xia-zai-yu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过使用它简单的标记语法，就可以使普通的文本内容具有一定的格式。<br>MarkdownPad是Windows系统下一款全功能的Markdown编辑器。</p><h1 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h1><p>点击<a href="http://markdownpad.com/" target="_blank" rel="noopener">这里</a>进入MarkdownPad的主页面，点击上面菜单栏的Download选项就可以下载MarkdownPad了。下载完成后得到markdownpad2-setup.exe文件。</p><h1 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h1><p>双击下载的文件，选择安装目录，其他的选择默认就好，直至安装完成。</p><h1 id="3、使用之前"><a href="#3、使用之前" class="headerlink" title="3、使用之前"></a>3、使用之前</h1><p>刚安装之后打开MarkdownPad2，开启实时预览，窗口的右半部分可能会出现crashed，并且会弹出HTTP Render error错误提示框。这时关闭提示框，<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="noopener">下载</a>这个SDK，安装之后重启一下电脑，再打开MarkdownPad2就不会出现上述错误了。</p>]]></content>
      
      
      <categories>
          
          <category> 搭建个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post title</title>
      <link href="/2019/01/29/post-title/"/>
      <url>/2019/01/29/post-title/</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><p>##标题二</p><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><p>‘’’<br>代码块<br>‘’’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/29/hello-world/"/>
      <url>/2019/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
